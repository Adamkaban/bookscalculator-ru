// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–Ω–∏–≥–∞—Ö
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å JSON –¥–∞–Ω–Ω—ã–º–∏ (–∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ p-seo text)
const sourceDir = path.join(__dirname, '../../../p-seo text');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤
function loadAllBooksData() {
  try {
    // –ß–∏—Ç–∞–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ p-seo text
    const files = fs.readdirSync(sourceDir).filter(file => file.endsWith('.json'));
    const booksData = [];

    files.forEach(file => {
      const filePath = path.join(sourceDir, file);
      try {
        const bookData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        booksData.push(bookData);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
      }
    });

    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${booksData.length} –∫–Ω–∏–≥ –∏–∑ ${files.length} —Ñ–∞–π–ª–æ–≤`);
    return booksData;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–Ω–∏–≥–∞—Ö:', error.message);
    return [];
  }
}

// –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∫–Ω–∏–≥
export const booksData = loadAllBooksData();

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –ø–æ ID
export function getBookById(id) {
  return booksData.find(book => book.id === id);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –ø–æ slug
export function getBookBySlug(slug) {
  return booksData.find(book => book.slug === slug);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–Ω–∏–≥
export function getAllBooks() {
  return booksData;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏
export function getRandomBook() {
  return booksData[Math.floor(Math.random() * booksData.length)];
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π)
export function getRelatedBooks(currentBookId, limit = 3) {
  return booksData
    .filter(book => book.id !== currentBookId)
    .slice(0, limit);
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –¥–ª—è –∫–Ω–∏–≥–∏
export function getBookUrl(book) {
  return `/${book.slug}`;
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è
export function formatReadingTime(book) {
  const { reading_time, pages } = book.basic_info;
  return `${reading_time} ‚Ä¢ ${pages} —Å—Ç—Ä–∞–Ω–∏—Ü`;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–Ω–∏–≥–∏
export function getDifficultyLevel(book) {
  const difficulty = book.basic_info.difficulty;
  const levels = {
    '–õ–µ–≥–∫–∞—è': { label: '–õ–µ–≥–∫–∞—è', color: 'green', icon: 'üü¢' },
    '–°—Ä–µ–¥–Ω—è—è': { label: '–°—Ä–µ–¥–Ω—è—è', color: 'blue', icon: 'üîµ' },
    '–°–ª–æ–∂–Ω–∞—è': { label: '–°–ª–æ–∂–Ω–∞—è', color: 'red', icon: 'üî¥' }
  };
  return levels[difficulty] || levels['–°—Ä–µ–¥–Ω—è—è'];
}