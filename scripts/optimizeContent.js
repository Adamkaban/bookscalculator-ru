#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/optimizeContent.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const pagesDir = path.join(__dirname, '../src/pages');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function analyzePage(pageName) {
  const filePath = path.join(pagesDir, pageName);

  if (!fs.existsSync(filePath)) {
    console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${pageName}`);
    return null;
  }

  try {
    const content = fs.readFileSync(filePath, 'utf8');

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const analysis = {
      fileName: pageName,
      hasDuplicateMeta: content.includes('og:type') && content.includes('twitter:card'),
      hasInlineStyles: content.includes('<style>') && content.length > 10000,
      hasLongTitle: content.match(/<title>([^<]{100,})/),
      hasCanonical: content.includes('rel="canonical"'),
      lineCount: content.split('\n').length,
      wordCount: content.split(/\s+/).length,
      hasTechnicalMeta: content.includes('noindex') || content.includes('nofollow'),
      hasSchemaMarkup: content.includes('application/ld+json'),
      hasOpenGraph: content.includes('property="og:'),
      hasTwitterCards: content.includes('name="twitter:')
    };

    return analysis;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${pageName}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function optimizePage(pageName) {
  const filePath = path.join(pagesDir, pageName);

  if (!fs.existsSync(filePath)) {
    console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${pageName}`);
    return false;
  }

  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let optimized = false;

    // 1. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –º–µ—Ç–∞-—Ç–µ–≥–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    if (content.includes('og:type') && content.includes('twitter:card')) {
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –º–µ—Ç–∞-—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
      const metaSectionPattern = /<!-- –ú–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ -->[\s\S]*?<\/script>/g;
      const matches = content.match(metaSectionPattern);

      if (matches && matches.length > 1) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–µ–∫—Ü–∏–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
        for (let i = 1; i < matches.length; i++) {
          content = content.replace(matches[i], '');
        }
        optimized = true;
        console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –º–µ—Ç–∞-—Ç–µ–≥–∏`);
      }
    }

    // 2. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const titleMatch = content.match(/<title>([^<]{100,})/);
    if (titleMatch) {
      const longTitle = titleMatch[1];
      const shortTitle = longTitle.substring(0, 60) + '...';
      content = content.replace(longTitle, shortTitle);
      optimized = true;
      console.log(`  ‚úÖ –£–∫–æ—Ä–æ—á–µ–Ω –¥–ª–∏–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫`);
    }

    // 3. –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π URL –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if (!content.includes('rel="canonical"')) {
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ head
      const headClosePattern = /<\/head>/;
      const canonicalURL = `https://bookscalculator.ru${pageName.replace('.astro', '').replace('index', '')}`;

      const canonicalLink = `  <link rel="canonical" href="${canonicalURL}" />\n`;

      if (headClosePattern.test(content)) {
        content = content.replace(headClosePattern, canonicalLink + '</head>');
        optimized = true;
        console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π URL`);
      }
    }

    // 4. –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
    if (content.includes('\n\n\n')) {
      optimized = true;
      console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω—ã –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (optimized) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${pageName}`);
    } else {
      console.log(`‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${pageName}`);
    }

    return optimized;

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${pageName}:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞...\n');

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Astro —Ñ–∞–π–ª–æ–≤
  const files = fs.readdirSync(pagesDir).filter(file => file.endsWith('.astro'));

  console.log(`üìÇ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n`);

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const analysisResults = [];
  for (const file of files) {
    const analysis = analyzePage(file);
    if (analysis) {
      analysisResults.push(analysis);
    }
  }

  // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:');
  console.log(`–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${analysisResults.length}`);
  console.log(`–° –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –º–µ—Ç–∞-—Ç–µ–≥–∞–º–∏: ${analysisResults.filter(a => a.hasDuplicateMeta).length}`);
  console.log(`–° –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: ${analysisResults.filter(a => a.hasLongTitle).length}`);
  console.log(`–ë–µ–∑ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö URL: ${analysisResults.filter(a => !a.hasCanonical).length}`);
  console.log(`–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${analysisResults.filter(a => a.hasTechnicalMeta).length}`);
  console.log(`–° Schema —Ä–∞–∑–º–µ—Ç–∫–æ–π: ${analysisResults.filter(a => a.hasSchemaMarkup).length}`);
  console.log(`–° Open Graph: ${analysisResults.filter(a => a.hasOpenGraph).length}`);

  console.log('\nüîß –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...\n');

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  let optimizedCount = 0;
  let errorCount = 0;

  for (const file of files) {
    console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${file}`);
    if (optimizePage(file)) {
      optimizedCount++;
    } else {
      errorCount++;
    }
  }

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${optimizedCount} —Å—Ç—Ä–∞–Ω–∏—Ü`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} —Å—Ç—Ä–∞–Ω–∏—Ü`);
  console.log(`üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
main();