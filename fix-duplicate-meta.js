#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∫–Ω–∏–≥
 * –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞-—Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –ø–æ—Å–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ SEOHead
 */

import fs from 'fs';
import path from 'path';
import { glob } from 'glob';

// –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥
const pattern = 'src/pages/skolko-chitat-*.astro';

async function fixDuplicateMetaTags() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ—Ç–∞-—Ç–µ–≥–∞–º–∏...');

  try {
    const files = await glob(pattern);

    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

    let fixedCount = 0;

    for (const file of files) {
      const filePath = path.join(process.cwd(), file);

      try {
        let content = fs.readFileSync(filePath, 'utf8');
        const originalContent = content;

        // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
        const duplicateMetaPattern = /[\s]*<!-- –ú–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ -->[\s\S]*?<\/script>[\s]*<\/BaseLayout>/;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞-—Ç–µ–≥–∏
        if (content.includes('import SEOHead from \'../components/SEOHead.astro\'') &&
            content.includes('<!-- –ú–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ -->')) {

          // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞-—Ç–µ–≥–∏
          content = content.replace(duplicateMetaPattern, '\n\n</BaseLayout>');

          if (content !== originalContent) {
            fs.writeFileSync(filePath, content, 'utf8');
            fixedCount++;
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${file}`);
          }
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
      }
    }

    console.log(`\nüéâ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} —Ñ–∞–π–ª–æ–≤`);
    console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixDuplicateMetaTags();